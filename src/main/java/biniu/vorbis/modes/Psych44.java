package biniu.vorbis.modes;
/********************************************************************
 *                                                                  *
 * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
 * USE, DISTRIBUTION AND REPRODUCTION OF THIS LIBRARY SOURCE IS     *
 * GOVERNED BY A BSD-STYLE SOURCE LICENSE INCLUDED WITH THIS SOURCE *
 * IN 'COPYING'. PLEASE READ THESE TERMS BEFORE DISTRIBUTING.       *
 *                                                                  *
 * THE OggVorbis SOURCE CODE IS (C) COPYRIGHT 1994-2002             *
 * by the XIPHOPHORUS Company http://www.xiph.org/                  *
 *                                                                  *
 ********************************************************************
 * <p>Title: EncoderVorbis</p>
 * <p>Description: Codec for encoding music files (wav -> ogg) </p>
 * @author Zbigniew Sudnik
 * @version 1.1.0j
 * function:
 * last mod: 2005-05-01 07:00:00
 ********************************************************************/

import biniu.vorbis.AdjStereo;
import biniu.vorbis.Att3;
import biniu.vorbis.CompandBlock;
import biniu.vorbis.InfoPsyGlobal;
import biniu.vorbis.Noise3;
import biniu.vorbis.NoiseGuard;
import biniu.vorbis.PsyInfo;
import biniu.vorbis.VpAdjBlock;

//function: key psychoacoustic settings for 44.1/48kHz

public class Psych44 {

  /* preecho trigger settings *****************************************/

  static InfoPsyGlobal _psy_global_44[]={

    new InfoPsyGlobal(8,   /* lines per eighth octave */
     Util.intTab(20.f,14.f,12.f,12.f,12.f,12.f,12.f),
     Util.intTab(-60.f,-30.f,-40.f,-40.f,-40.f,-40.f,-40.f),
     2,
     -75.f,
     -6.f,
     Util.intTab(99),
     Util.intTab(Util.intTab(99),Util.intTab(99)),
     Util.intTab(0),
     Util.intTab(0),
     Util.intTab(Util.intTab(0),Util.intTab(0))
    ),
    new InfoPsyGlobal(8,   /* lines per eighth octave */
     Util.intTab(14.f,10.f,10.f,10.f,10.f,10.f,10.f),
     Util.intTab(-40.f,-30.f,-25.f,-25.f,-25.f,-25.f,-25.f), 2,-80.f,
     -6.f,
     Util.intTab(99),Util.intTab(Util.intTab(99),Util.intTab(99)),Util.intTab(0),Util.intTab(0),Util.intTab(Util.intTab(0),Util.intTab(0))
    ),
    new InfoPsyGlobal(8,   /* lines per eighth octave */
     Util.intTab(12.f,10.f,10.f,10.f,10.f,10.f,10.f),
     Util.intTab(-20.f,-20.f,-15.f,-15.f,-15.f,-15.f,-15.f), 0,-80.f,
     -6.f,
     Util.intTab(99),Util.intTab(Util.intTab(99),Util.intTab(99)),Util.intTab(0),Util.intTab(0),Util.intTab(Util.intTab(0),Util.intTab(0))
    ),
    new InfoPsyGlobal(8,   /* lines per eighth octave */
     Util.intTab(10.f,8.f,8.f,8.f,8.f,8.f,8.f),
     Util.intTab(-20.f,-15.f,-12.f,-12.f,-12.f,-12.f,-12.f), 0,-80.f,
     -6.f,
     Util.intTab(99),Util.intTab(Util.intTab(99),Util.intTab(99)),Util.intTab(0),Util.intTab(0),Util.intTab(Util.intTab(0),Util.intTab(0))
    ),
    new InfoPsyGlobal(8,   /* lines per eighth octave */
     Util.intTab(10.f,6.f,6.f,6.f,6.f,6.f,6.f),
     Util.intTab(-15.f,-15.f,-12.f,-12.f,-12.f,-12.f,-12.f), 0,-85.f,
     -6.f,
     Util.intTab(99),Util.intTab(Util.intTab(99),Util.intTab(99)),Util.intTab(0),Util.intTab(0),Util.intTab(Util.intTab(0),Util.intTab(0))
    ),
  };

  /* noise compander lookups * low, mid, high quality ****************/
  static CompandBlock _psy_compand_44[]={
    /* sub-mode Z short */
    new CompandBlock(Util.intTab(
      0, 1, 2, 3, 4, 5, 6,  7,     /* 7dB */
      8, 9,10,11,12,13,14, 15,     /* 15dB */
      16,17,18,19,20,21,22, 23,     /* 23dB */
      24,25,26,27,28,29,30, 31,     /* 31dB */
      32,33,34,35,36,37,38, 39     /* 39dB */
    )),
    /* mode_Z nominal short */
    new CompandBlock(Util.intTab(
       0, 1, 2, 3, 4, 5, 6,  6,     /* 7dB */
       7, 7, 7, 7, 6, 6, 6,  7,     /* 15dB */
       7, 8, 9,10,11,12,13, 14,     /* 23dB */
      15,16,17,17,17,18,18, 19,     /* 31dB */
      19,19,20,21,22,23,24, 25     /* 39dB */
    )),
    /* mode A short */
    new CompandBlock(Util.intTab(
      0, 1, 2, 3, 4, 5, 5,  5,     /* 7dB */
      6, 6, 6, 5, 4, 4, 4,  4,     /* 15dB */
      4, 4, 5, 5, 5, 6, 6,  6,     /* 23dB */
      7, 7, 7, 8, 8, 8, 9, 10,     /* 31dB */
      11,12,13,14,15,16,17, 18     /* 39dB */
    )),
    /* sub-mode Z long */
    new CompandBlock(Util.intTab(
       0, 1, 2, 3, 4, 5, 6,  7,     /* 7dB */
       8, 9,10,11,12,13,14, 15,     /* 15dB */
      16,17,18,19,20,21,22, 23,     /* 23dB */
      24,25,26,27,28,29,30, 31,     /* 31dB */
      32,33,34,35,36,37,38, 39     /* 39dB */
    )),
    /* mode_Z nominal long */
    new CompandBlock(Util.intTab(
      0, 1, 2, 3, 4, 5, 6,  7,     /* 7dB */
      8, 9,10,11,12,12,13, 13,     /* 15dB */
      13,14,14,14,15,15,15, 15,     /* 23dB */
      16,16,17,17,17,18,18, 19,     /* 31dB */
      19,19,20,21,22,23,24, 25     /* 39dB */
    )),
    /* mode A long */
    new CompandBlock(Util.intTab(
      0, 1, 2, 3, 4, 5, 6,  7,     /* 7dB */
      8, 8, 7, 6, 5, 4, 4,  4,     /* 15dB */
      4, 4, 5, 5, 5, 6, 6,  6,     /* 23dB */
      7, 7, 7, 8, 8, 8, 9, 10,     /* 31dB */
      11,12,13,14,15,16,17, 18     /* 39dB */
    ))
  };

  /* tonal masking curve level adjustments *************************/

  static VpAdjBlock _vp_tonemask_adj_longblock[]={

     /* 63     125     250     500       1       2       4       8      16 */

     new VpAdjBlock(Util.intTab( -3, -8,-13,-15,-10,-10,-10,-10,-10,-10,-10,  0,  0,  0,  0,  0,  0)), /* -1 */

  /* Util.intTab({-15,-15,-15,-15,-10, -8, -4, -2,  0,  0,  0, 10,  0,  0,  0,  0,  0)),    0 */
     new VpAdjBlock(Util.intTab( -4,-10,-14,-16,-15,-14,-13,-12,-12,-12,-11, -1, -1, -1, -1, -1,  0)), /* 0 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  5,  0,  0,  0,  0,  0)),    1 */
     new VpAdjBlock(Util.intTab( -6,-12,-14,-16,-15,-15,-14,-13,-13,-12,-12, -2, -2, -1, -1, -1,  0)), /* 1 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    2 */
     new VpAdjBlock(Util.intTab(-12,-13,-14,-16,-16,-16,-15,-14,-13,-12,-12, -6, -3, -1, -1, -1,  0)), /* 2 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    3 */
     new VpAdjBlock(Util.intTab(-15,-15,-15,-16,-16,-16,-16,-14,-13,-13,-13,-10, -4, -2, -1, -1,  0)), /* 3 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)), *//* 4 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-13,-11, -7  -3, -1, -1 , 0)), /* 4 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    5 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-13,-11, -7  -3, -1, -1 , 0)), /* 5 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    6 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -8, -4, -2, -2,  0)), /* 6 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    7 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 7 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    8 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 8 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    9 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 9 */

  /* {{-15,-15,-15,-15,-15,-12,-10, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0)),    10 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 10 */
  };

  static VpAdjBlock _vp_tonemask_adj_otherblock[]={
     /* 63     125     250     500       1       2       4       8      16 */

     new VpAdjBlock(Util.intTab( -3, -8,-13,-15,-10,-10, -9, -9, -9, -9, -9,  1,  1,  1,  1,  1,  1)), /* -1 */

  /* {{-20,-20,-20,-20,-14,-12,-10, -8, -4,  0,  0, 10,  0,  0,  0,  0,  0)),    0 */
     new VpAdjBlock(Util.intTab( -4,-10,-14,-16,-14,-13,-12,-12,-11,-11,-10,  0,  0,  0,  0,  0,  0)), /* 0 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  5,  0,  0,  0,  0,  0)),    1 */
     new VpAdjBlock(Util.intTab( -6,-12,-14,-16,-15,-15,-14,-13,-13,-12,-12, -2, -2, -1,  0,  0,  0)), /* 1 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    2 */
     new VpAdjBlock(Util.intTab(-12,-13,-14,-16,-16,-16,-15,-14,-13,-12,-12, -5, -2, -1,  0,  0,  0)), /* 2 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    3 */
     new VpAdjBlock(Util.intTab(-15,-15,-15,-16,-16,-16,-16,-14,-13,-13,-13,-10, -4, -2,  0,  0,  0)), /* 3 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    4 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-13,-11, -7,  -3, -1, -1 , 0)), /* 4 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    5 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-13,-11, -7, -3, -1, -1 , 0)), /* 5 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    6 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -8, -4, -2, -2,  0)), /* 6 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    7 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 7 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    8 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 8 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    9 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 9 */

  /* {{-20,-20,-20,-20,-20,-18,-16,-14,-10,  0,  0,  0,  0,  0,  0,  0,  0)),    10 */
     new VpAdjBlock(Util.intTab(-16,-16,-16,-16,-16,-16,-16,-15,-14,-14,-14,-12, -9, -4, -2, -2,  0)), /* 10 */
  };

  /* noise bias (transition block) */
  static Noise3 _psy_noisebias_trans[]={
    /*  63     125     250     500      1k       2k      4k      8k     16k*/
    /* -1 */
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  4,  8,  8,  8,  8, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-20,-16, -8, -6, -6, -2,  2,  2,  3,  6,  6, 15),
      Util.intTab(-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2))),
    /* 0
    {{{-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  4,  4,  5,  5,  5,  8,  10),
      {-30,-30,-30,-30,-26,-22,-20,-14, -8, -4,  0,  0,  0,  0,  2,  4,  10),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -4, -4, -4,  -2))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-12, -6, -4,  0,  2,  4,  4,  5,  5,  5,  8,  10),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14, -8, -4,  0,  0,  0,  0,  2,  3,   6),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -4, -4, -4,  -2))),
    /* 1
    {{{-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  4,  4,  5,  5,  5,  8,  10),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, -2, -2, -2,  0,  2,  8),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  4,  4,  5,  5,  5,  8,  10),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, -2, -2, -2,  0,  1,   4),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6,  -4))),
    /* 2
    {{{-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  2,  2,  4,  4,  5,  6,  10),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2, -2, -2, -2,  0,  2,  6),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))), */
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  2,  2,  4,  4,  5,  6,  10),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -2, -1,  0,  3),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -7, -4))),
    /* 3
    {{{-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  2,  2,  4,  4,  4,  5,  8),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -1,  1,  6),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-12,-10, -8,  0,  2,  2,  2,  4,  4,  4,  5,  8),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -2,  0,  2),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),
    /* 4
    {{{-20,-20,-20,-20,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -1,  1,  5),
      {-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -3, -3, -3, -3, -2, -1,  1),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),
    /* 5
    {{{-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      {-32,-32,-32,-32,-28,-24,-22,-16,-12, -6, -4, -4, -4, -4, -2, -1,  2),
      {-34,-34,-34,-34,-30,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -5))), */
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-32,-32,-32,-32,-28,-24,-22,-16,-12, -6, -4, -4, -4, -4, -3, -1,  0),
      Util.intTab(-34,-34,-34,-34,-30,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -5))),
    /* 6
    {{{-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      {-32,-32,-32,-32,-28,-24,-24,-18,-14, -8, -6, -6, -6, -6, -4, -2,  1),
      {-34,-34,-34,-34,-30,-26,-24,-18,-17,-15,-15,-15,-15,-13,-13,-12, -8))),*/
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-32,-32,-32,-32,-28,-24,-24,-18,-14, -8, -6, -6, -6, -6, -5, -2,  0),
      Util.intTab(-34,-34,-34,-34,-30,-26,-26,-24,-22,-19,-19,-19,-19,-18,-17,-16,-12))),
    /* 7
    {{{-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      {-32,-32,-32,-32,-28,-24,-24,-18,-14,-12,-10, -8, -8, -8, -6, -4,  0),
      {-34,-34,-34,-34,-30,-26,-26,-24,-22,-19,-19,-19,-19,-18,-17,-16,-12))),*/
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-20,-18,-14, -8, -1,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-32,-32,-32,-32,-28,-24,-24,-24,-18,-14,-12,-10,-10,-10, -8, -6, -2),
      Util.intTab(-34,-34,-34,-34,-30,-26,-26,-26,-24,-24,-24,-24,-24,-24,-24,-20,-16))),
    /* 8
    {{{-24,-24,-24,-24,-22,-20,-15,-10, -8, -2,  0,  0,  0,  1,  2,  3,  7),
      {-36,-36,-36,-36,-30,-30,-30,-24,-18,-14,-12,-10,-10,-10, -8, -6, -2),
      {-36,-36,-36,-36,-34,-30,-28,-26,-24,-24,-24,-24,-24,-24,-24,-20,-16))),*/
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-22,-20,-15,-10, -8, -2,  0,  0,  0,  1,  2,  3,  7),
      Util.intTab(-36,-36,-36,-36,-30,-30,-30,-24,-20,-16,-16,-16,-16,-14,-12,-10, -7),
      Util.intTab(-36,-36,-36,-36,-34,-30,-28,-26,-24,-30,-30,-30,-30,-30,-30,-24,-20))),
    /* 9
    {{{-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2,  2),
      {-36,-36,-36,-36,-34,-32,-32,-28,-20,-16,-16,-16,-16,-14,-12,-10, -7),
      {-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-24,-20))),*/
    new Noise3(Util.intTab(Util.intTab(-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2,  2),
      Util.intTab(-38,-38,-38,-38,-36,-34,-34,-30,-24,-20,-20,-20,-20,-18,-16,-12,-10),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-38,-35,-35,-35,-35,-35,-35,-35,-35,-30))),
    /* 10 */
    new Noise3(Util.intTab(Util.intTab(-30,-30,-30,-30,-30,-30,-30,-28,-20,-14,-14,-14,-14,-14,-14,-12,-10),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-30,-30,-30,-30,-30,-30,-20),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40))),
  };

  /*  noise bias (long block) */
  static Noise3 _psy_noisebias_long[]={
    /*63     125     250     500      1k       2k      4k      8k     16k*/
    /* -1 */
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  0,  6,  6,  6,  6, 10, 10, 12,  20),
      Util.intTab(-20,-20,-20,-20,-20,-20,-10, -2,  0,  0,  0,  0,  0,  2,  4,  6,  15),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-10, -6, -6, -6, -6, -6, -4, -4, -4, -2))),

    /* 0 */
    /*  {{{-10,-10,-10,-10,-10,-10, -8,  2,  2,  2,  4,  4,  5,  5,  5,  8,  10),
        {-20,-20,-20,-20,-20,-20,-20,-14, -6,  0,  0,  0,  0,  0,  2,  4,  10),
        {-20,-20,-20,-20,-20,-20,-20,-14, -8, -6, -6, -6, -6, -4, -4, -4, -2))),*/
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10,-10, -8,  2,  2,  2,  4,  4,  5,  5,  5,  8,  10),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14, -6,  0,  0,  0,  0,  0,  2,  3,  6),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14, -8, -6, -6, -6, -6, -4, -4, -4, -2))),
    /* 1 */
    /*  {{{-10,-10,-10,-10,-10,-10, -8, -4,  0,  2,  4,  4,  5,  5,  5,  8,  10),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -2, -2, -2, -2,  0,  2,  8),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10,-10, -8, -4,  0,  2,  4,  4,  5,  5,  5,  8,  10),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -2, -2, -2, -2,  0,  1,  4),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10, -8, -8, -8, -8, -6, -6, -6, -4))),
    /* 2 */
    /*  {{{-10,-10,-10,-10,-10,-10,-10, -8,  0,  2,  2,  2,  4,  4,  5,  6,  10),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -2, -2, -2, -2,  0,  2,  6),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10,-10,-10, -8,  0,  2,  2,  2,  4,  4,  5,  6,  10),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -2, -1,  0,  3),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),
    /* 3 */
    /*  {{{-10,-10,-10,-10,-10,-10,-10, -8,  0,  2,  2,  2,  4,  4,  4,  5,  8),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -1,  1,  6),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10,-10,-10, -8,  0,  2,  2,  2,  4,  4,  4,  5,  8),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -2,  0,  2),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -5))),
    /* 4 */
    /*  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -1,  1,  5),
        {-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -4))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10, -4, -3, -3, -3, -3, -2, -1,  1),
      Util.intTab(-20,-20,-20,-20,-20,-20,-20,-14,-10,-10,-10,-10,-10, -8, -8, -8, -7))),
    /* 5 */
    /*  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
        {-22,-22,-22,-22,-22,-22,-22,-16,-12, -6, -4, -4, -4, -4, -2, -1,  2),
        {-24,-24,-24,-24,-24,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -5))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-22,-22,-22,-22,-22,-22,-22,-16,-12, -6, -4, -4, -4, -4, -3, -1,  0),
      Util.intTab(-24,-24,-24,-24,-24,-24,-24,-18,-14,-12,-12,-12,-12,-10,-10, -9, -8))),
    /* 6 */
    /*  {{{-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
        {-24,-24,-24,-24,-24,-24,-24,-18,-14, -8, -6, -6, -6, -6, -4, -2,  1),
        {-26,-26,-26,-26,-26,-26,-26,-18,-16,-15,-15,-15,-15,-13,-13,-12, -8))),*/
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-24,-24,-24,-24,-24,-24,-24,-18,-14, -8, -6, -6, -6, -6, -5, -2,  0),
      Util.intTab(-26,-26,-26,-26,-26,-26,-26,-18,-16,-15,-15,-15,-15,-13,-13,-12,-10))),
    /* 7 */
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-15,-15,-10, -4,  1,  1,  1,  2,  3,  3,  4,  7),
      Util.intTab(-24,-24,-24,-24,-24,-24,-24,-18,-14,-10, -8, -8, -8, -8, -6, -4,  0),
      Util.intTab(-26,-26,-26,-26,-26,-26,-26,-22,-20,-19,-19,-19,-19,-18,-17,-16,-12))),
    /* 8 */
    new Noise3(Util.intTab(Util.intTab(-15,-15,-15,-15,-15,-15,-15,-10, -4,  0,  0,  0,  0,  1,  2,  3,  7),
      Util.intTab(-26,-26,-26,-26,-26,-26,-26,-20,-16,-12,-10,-10,-10,-10, -8, -6, -2),
      Util.intTab(-28,-28,-28,-28,-28,-28,-28,-26,-24,-24,-24,-24,-24,-24,-24,-20,-16))),
    /* 9 */
    new Noise3(Util.intTab(Util.intTab(-22,-22,-22,-22,-22,-22,-22,-18,-14, -8, -4, -4, -4, -4, -4, -2,  2),
      Util.intTab(-26,-26,-26,-26,-26,-26,-26,-22,-18,-16,-16,-16,-16,-14,-12,-10, -7),
      Util.intTab(-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-24,-20))),
    /* 10 */
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-24,-24,-24,-24,-24,-18,-14,-14,-14,-14,-14,-12,-10),
      Util.intTab(-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-30,-20),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40))),
  };

  /* noise bias (impulse block) */
  static Noise3 _psy_noisebias_impulse[]={
    /*  63     125     250     500      1k      2k      4k      8k     16k*/
    /* -1 */
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  4,  8,  8,  8,  8, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-20,-16, -8, -6, -6, -2,  2,  2,  3,  6,  6, 15),
      Util.intTab(-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2))),

    /* 0 */
    /*  {{{-10,-10,-10,-10,-10, -4,  0,  0,  4,  4,  8,  8,  8, 10, 12, 14, 20),
        {-30,-30,-30,-30,-26,-22,-20,-14, -6, -2,  0,  0,  0,  0,  2,  4,  10),
        {-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2))),*/
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  4,  4,  8,  8,  8, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14, -6, -2,  0,  0,  0,  0,  2,  3,  6),
      Util.intTab(-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2))),
    /* 1 */
    new Noise3(Util.intTab(Util.intTab(-12,-12,-12,-12,-12, -8, -6, -4,  0,  4,  4,  4,  4, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -4, -4, -2, -2, -2, -2,  2),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -8,-10,-10, -8, -8, -8, -6, -4))),
    /* 2 */
    new Noise3(Util.intTab(Util.intTab(-14,-14,-14,-14,-14,-10, -8, -6, -2,  2,  2,  2,  2,  8, 10, 10, 16),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2,  0),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4))),
    /* 3 */
    new Noise3(Util.intTab(Util.intTab(-14,-14,-14,-14,-14,-10, -8, -6, -2,  2,  2,  2,  2,  6,  8,  8, 14),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2,  0),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4))),
    /* 4 */
    new Noise3(Util.intTab(Util.intTab(-16,-16,-16,-16,-16,-12,-10, -6, -2,  0,  0,  0,  0,  4,  6,  6, 12),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -4, -4, -4, -2,  0),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10,-10,-10,-10,-10,-10,-10, -8, -4))),
    /* 5 */
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  4,  6, 11),
      Util.intTab(-32,-32,-32,-32,-28,-24,-22,-16,-10, -6, -8, -8, -6, -6, -6, -4, -2),
      Util.intTab(-34,-34,-34,-34,-30,-26,-24,-18,-14,-12,-12,-12,-12,-12,-10, -9, -5))),
    /* 6
    {{{-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  4,  6, 11),
        {-34,-34,-34,-34,-30,-30,-24,-20,-12,-12,-14,-14,-10, -9, -8, -6, -4),
        {-34,-34,-34,-34,-34,-30,-26,-20,-16,-15,-15,-15,-15,-15,-13,-12, -8))),*/
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  4,  6, 11),
      Util.intTab(-34,-34,-34,-34,-30,-30,-30,-24,-16,-16,-16,-16,-16,-16,-14,-14,-12),
      Util.intTab(-36,-36,-36,-36,-36,-34,-28,-24,-20,-20,-20,-20,-20,-20,-20,-18,-16))),
    /* 7 */
    /*  Util.intTab({{-22,-22,-22,-22,-22,-20,-14,-10, -6,  0,  0,  0,  0,  4,  4,  6, 11),
        {-34,-34,-34,-34,-30,-30,-24,-20,-14,-14,-16,-16,-14,-12,-10,-10,-10),
        {-34,-34,-34,-34,-32,-32,-30,-24,-20,-19,-19,-19,-19,-19,-17,-16,-12))),*/
    new Noise3(Util.intTab(Util.intTab(-22,-22,-22,-22,-22,-20,-14,-10, -6,  0,  0,  0,  0,  4,  4,  6, 11),
      Util.intTab(-34,-34,-34,-34,-30,-30,-30,-30,-26,-26,-26,-26,-26,-26,-26,-24,-22),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-30,-24))),
    /* 8 */
    /*  {{{-24,-24,-24,-24,-24,-22,-14,-10, -6, -1, -1, -1, -1,  3,  3,  5, 10),
        {-34,-34,-34,-34,-30,-30,-30,-24,-20,-20,-20,-20,-20,-18,-16,-16,-14),
        {-36,-36,-36,-36,-36,-34,-28,-24,-24,-24,-24,-24,-24,-24,-24,-20,-16))),*/
    new Noise3(Util.intTab(Util.intTab(-24,-24,-24,-24,-24,-22,-14,-10, -6, -1, -1, -1, -1,  3,  3,  5, 10),
      Util.intTab(-34,-34,-34,-34,-34,-32,-32,-30,-26,-26,-26,-26,-26,-26,-26,-26,-24),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-30,-24))),
    /* 9 */
    /*  {{{-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2,  2),
        {-36,-36,-36,-36,-34,-32,-32,-30,-26,-26,-26,-26,-26,-22,-20,-20,-18),
        {-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-24,-20))),*/
    new Noise3(Util.intTab(Util.intTab(-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -4, -4, -4, -4, -4, -2,  2),
      Util.intTab(-36,-36,-36,-36,-34,-32,-32,-30,-26,-26,-26,-26,-26,-26,-26,-26,-26),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-32,-30,-30,-30,-30,-30,-30,-30,-24,-20))),
    /* 10 */
    new Noise3(Util.intTab(Util.intTab(-30,-30,-30,-30,-30,-26,-24,-24,-24,-20,-16,-16,-16,-16,-16,-14,-12),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-30,-30,-30,-30,-30,-30,-26),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40))),
  };

  /* noise bias (padding block) */
  static Noise3 _psy_noisebias_padding[]={
    /*  63     125     250     500      1k       2k      4k      8k     16k*/

    /* -1 */
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  4,  8,  8,  8,  8, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-20,-16, -8, -6, -6, -2,  2,  2,  3,  6,  6, 15),
      Util.intTab(-30,-30,-30,-30,-30,-24,-20,-14,-10, -6, -8, -8, -6, -6, -6, -4, -2))),

    /* 0 */
    new Noise3(Util.intTab(Util.intTab(-10,-10,-10,-10,-10, -4,  0,  0,  4,  8,  8,  8,  8, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -2,  2,  3,  6,  6,  8, 10),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4, -4, -4, -4, -4, -2,  0,  2))),
    /* 1 */
    new Noise3(Util.intTab(Util.intTab(-12,-12,-12,-12,-12, -8, -6, -4,  0,  4,  4,  4,  4, 10, 12, 14, 20),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -4,  0,  0,  0,  2,  2,  4,  8),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -6, -6, -6, -6, -4, -2,  0))),
    /* 2 */
    /*  {{{-14,-14,-14,-14,-14,-10, -8, -6, -2,  2,  2,  2,  2,  8, 10, 10, 16),
        {-30,-30,-30,-30,-26,-22,-20,-14,-10, -4,  0,  0,  0,  2,  2,  4,  8),
        {-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2))),*/
    new Noise3(Util.intTab(Util.intTab(-14,-14,-14,-14,-14,-10, -8, -6, -2,  2,  2,  2,  2,  8, 10, 10, 16),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -1, -1, -1,  0,  0,  2,  6),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2))),
    /* 3 */
    new Noise3(Util.intTab(Util.intTab(-14,-14,-14,-14,-14,-10, -8, -6, -2,  2,  2,  2,  2,  6,  8,  8, 14),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -1, -1, -1,  0,  0,  2,  6),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2))),
    /* 4 */
    new Noise3(Util.intTab(Util.intTab(-16,-16,-16,-16,-16,-12,-10, -6, -2,  0,  0,  0,  0,  4,  6,  6, 12),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -6, -1, -1, -1, -1,  0,  2,  6),
      Util.intTab(-30,-30,-30,-30,-26,-22,-20,-14,-10, -8, -8, -8, -8, -8, -6, -4, -2))),
    /* 5 */
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  6,  6, 12),
      Util.intTab(-32,-32,-32,-32,-28,-24,-22,-16,-12, -6, -3, -3, -3, -3, -2,  0,  4),
      Util.intTab(-34,-34,-34,-34,-30,-26,-24,-18,-14,-10,-10,-10,-10,-10, -8, -5, -3))),
    /* 6 */
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  6,  6, 12),
      Util.intTab(-34,-34,-34,-34,-30,-30,-24,-20,-14, -8, -4, -4, -4, -4, -3, -1,  4),
      Util.intTab(-34,-34,-34,-34,-34,-30,-26,-20,-16,-13,-13,-13,-13,-13,-11, -8, -6))),
    /* 7 */
    new Noise3(Util.intTab(Util.intTab(-20,-20,-20,-20,-20,-18,-14,-10, -4,  0,  0,  0,  0,  4,  6,  6, 12),
      Util.intTab(-34,-34,-34,-34,-30,-30,-30,-24,-16,-10, -8, -6, -6, -6, -5, -3,  1),
      Util.intTab(-34,-34,-34,-34,-32,-32,-28,-22,-18,-16,-16,-16,-16,-16,-14,-12,-10))),
    /* 8 */
    new Noise3(Util.intTab(Util.intTab(-22,-22,-22,-22,-22,-20,-14,-10, -4,  0,  0,  0,  0,  3,  5,  5, 11),
      Util.intTab(-34,-34,-34,-34,-30,-30,-30,-24,-16,-12,-10, -8, -8, -8, -7, -5, -2),
      Util.intTab(-36,-36,-36,-36,-36,-34,-28,-22,-20,-20,-20,-20,-20,-20,-20,-16,-14))),
    /* 9 */
    new Noise3(Util.intTab(Util.intTab(-28,-28,-28,-28,-28,-28,-28,-20,-14, -8, -2, -2, -2, -2,  0,  2,  6),
      Util.intTab(-36,-36,-36,-36,-34,-32,-32,-24,-16,-12,-12,-12,-12,-12,-10, -8, -5),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-32,-26,-24,-24,-24,-24,-24,-24,-20,-18))),
    /* 10 */
    new Noise3(Util.intTab(Util.intTab(-30,-30,-30,-30,-30,-26,-24,-24,-24,-20,-12,-12,-12,-12,-12,-10, -8),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-35,-30,-25,-25,-25,-25,-25,-25,-15),
      Util.intTab(-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40,-40))),
  };


  static NoiseGuard _psy_noiseguards_44[]={
    new NoiseGuard(3,3,15),
    new NoiseGuard(3,3,15),
    new NoiseGuard(10,10,100),
    new NoiseGuard(10,10,100),
  };

  static int _psy_tone_suppress[]={
    -20,-20,-20,-20,-20,-24,-30,-40,-40,-45,-45,-45,
  };
  static int _psy_tone_0dB[]={
    90,90,95,95,95,95,105,105,105,105,105,105,
  };
  static int _psy_noise_suppress[]={
    -20,-20,-24,-24,-24,-24,-30,-40,-40,-45,-45,-45,
  };

  public static PsyInfo _psy_info_template= new PsyInfo(
    /* blockflag */
    -1,
    /* ath_adjatt, ath_maxatt */
    -140.f,-140.f,
    /* tonemask att boost/decay,suppr,curves */
    Util.intTab(0.f,0.f,0.f),     0.f,0.f,    -40.f, Util.intTab(0.f),

    /*noisemaskp,supp, low/high window, low/hi guard, minimum */
    1,          -0.f,           .5f, .5f,         0,0,0,
    /* noiseoffset*3, noisecompand, max_curve_dB */
    Util.intTab(Util.intTab(-1.f),Util.intTab(-1.f),Util.intTab(-1.f)),Util.intTab(-1.f),105.f,
    /* noise normalization - channel_p, point_p, start, partition, thresh. */
    0,0,-1,-1,0.f
  );

  /* ath ****************/

  static int _psy_ath_floater[]={
    -100,-100,-100,-100,-100,-100,-105,-105,-105,-105,-110,-120,
  };
  static int _psy_ath_abs[]={
    -130,-130,-130,-130,-140,-140,-140,-140,-140,-140,-140,-150,
  };

  /* stereo setup.  These don't map directly to quality level, there's
     an additional indirection as several of the below may be used in a
     single bitmanaged stream

  ****************/

  /* various stereo possibilities */

  /* stereo mode by base quality level */
  static AdjStereo _psy_stereo_modes_44[]={
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         -1  */
    new AdjStereo(Util.intTab(  4,  4,  4,  4,  4,  4,  4,  3,  2,  2,  1,  0,  0,  0,  0),
     Util.intTab(  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  5,  4,  3),
     Util.intfTab(  1,  2,  3,  4,  4,  4,  4,  4,  4,  5,  6,  7,  8,  8,  8),
     Util.intTab( 12,12.5f, 13,13.5f, 14,14.5f, 15, 99, 99, 99, 99, 99, 99, 99, 99)),

  /*    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         0  */
  /*{{  4,  4,  4,  4,  4,  4,  4,  3,  2,  2,  1,  0,  0,  0,  0),
     {  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  5,  4,  3),
     {  1,  2,  3,  4,  5,  5,  6,  6,  6,  6,  6,  7,  8,  8,  8),
     { 12,12.5, 13,13.5, 14,14.5, 15, 99, 99, 99, 99, 99, 99, 99, 99)),*/
    new AdjStereo(Util.intTab(  4,  4,  4,  4,  4,  4,  4,  3,  2,  1,  0,  0,  0,  0,  0),
     Util.intTab(  8,  8,  8,  8,  6,  6,  5,  5,  5,  5,  5,  5,  5,  4,  3),
     Util.intfTab(  1,  2,  3,  4,  4,  5,  6,  6,  6,  6,  6,  8,  8,  8,  8),
     Util.intTab( 12,12.5f, 13,13.5f, 14,14.5f, 15, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         1  */
    new AdjStereo(Util.intTab(  3,  3,  3,  3,  3,  3,  3,  3,  2,  1,  0,  0,  0,  0,  0),
     Util.intTab(  8,  8,  8,  8,  6,  6,  5,  5,  5,  5,  5,  5,  5,  4,  3),
     Util.intfTab(  1,  2,  3,  4,  4,  5,  6,  6,  6,  6,  6,  8,  8,  8,  8),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         2  */
    /*  {{  3,  3,  3,  3,  3,  3,  2,  2,  2,  1,  0,  0,  0,  0,  0),
        {  8,  8,  8,  6,  5,  5,  5,  5,  5,  5,  5,  4,  3,  2,  1),
        {  3,  4,  4,  4,  5,  6,  6,  6,  6,  6,  6,  8,  8,  8,  8),
        { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)), */
    new AdjStereo(Util.intTab(  3,  3,  3,  3,  3,  3,  3,  2,  1,  1,  0,  0,  0,  0,  0),
     Util.intTab(  8,  8,  6,  6,  5,  5,  4,  4,  4,  4,  4,  4,  3,  2,  1),
     Util.intfTab(  3,  4,  4,  5,  5,  6,  6,  6,  6,  6,  6,  8,  8,  8,  8),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         3  */
    new AdjStereo(Util.intTab(  2,  2,  2,  2,  2,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0),
     Util.intTab(  5,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  3,  2,  1),
     Util.intfTab(  4,  4,  5,  6,  6,  6,  6,  6,  8,  8, 10, 10, 10, 10, 10),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         4  */
    new AdjStereo(Util.intTab(  2,  2,  2,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  3,  3,  2,  1,  0),
     Util.intfTab(  6,  6,  6,  8,  8,  8,  8,  8,  8,  8, 10, 10, 10, 10, 10),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         5  */
    /*  {{  2,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0),
        {  6,  6,  8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10),
        { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),*/
    new AdjStereo(Util.intTab(  2,  2,  2,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  3,  3,  3,  3,  3,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0),
     Util.intfTab(  6,  7,  8,  8,  8, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         6  */
    /*  {{  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  3,  3,  3,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
        { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)), */
    new AdjStereo(Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  3,  3,  3,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intfTab(  8,  8,  8, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         7  */
    /*  Util.intTab({  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  3,  3,  3,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  8,  8,  8,  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
        { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),*/
    new AdjStereo(Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  3,  3,  3,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intfTab(  8,  8, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         8  */
    /*  {{  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
        {  8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
        { 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),*/
    new AdjStereo(Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intfTab(  8, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14         9  */
    new AdjStereo(Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intfTab(  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
    /*  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14        10  */
    new AdjStereo(Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intTab(  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),
     Util.intfTab(  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4),
     Util.intfTab( 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99)),
  };

  /* tone master attenuation by base quality mode and bitrate tweak */
  static Att3 _psy_tone_masteratt_44[]={
    new Att3(Util.intTab( 35,  21,   9),  0,    0), /* -1 */
    new Att3(Util.intTab( 30,  20,   8), -2, 1.25f), /* 0 */
    /*  new Att3({ 25,  14,   4),  0,    0), *//* 1 */
    new Att3(Util.intTab( 25,  12,   2),  0,    0), /* 1 */
    /*  {{ 20,  10,  -2),  0,    0), *//* 2 */
    new Att3(Util.intTab( 20,   9,  -3),  0,    0), /* 2 */
    new Att3(Util.intTab( 20,   9,  -4),  0,    0), /* 3 */
    new Att3(Util.intTab( 20,   9,  -4),  0,    0), /* 4 */
    new Att3(Util.intTab( 20,   6,  -6),  0,    0), /* 5 */
    new Att3(Util.intTab( 20,   3, -10),  0,    0), /* 6 */
    new Att3(Util.intTab( 18,   1, -14),  0,    0), /* 7 */
    new Att3(Util.intTab( 18,   0, -16),  0,    0), /* 8 */
    new Att3(Util.intTab( 18,  -2, -16),  0,    0), /* 9 */
    new Att3(Util.intTab( 12,  -2, -20),  0,    0), /* 10 */
    };

  /* lowpass by mode **************/
  static double _psy_lowpass_44[]={
    /*  15.1,15.8,16.5,17.9,20.5,48.,999.,999.,999.,999.,999. */
    13.9,15.1,15.8,16.5,17.2,18.9,20.1,48.,999.,999.,999.,999.
  };

  /* noise normalization **********/

  static int _noise_start_short_44[]={
    /*  16,16,16,16,32,32,9999,9999,9999,9999 */
    32,16,16,16,32,9999,9999,9999,9999,9999,9999
  };
  static int _noise_start_long_44[]={
    /*  128,128,128,256,512,512,9999,9999,9999,9999 */
    256,128,128,256,512,9999,9999,9999,9999,9999,9999
  };

  static int _noise_part_short_44[]={
      8,8,8,8,8,8,8,8,8,8,8
  };
  static int _noise_part_long_44[]={
      32,32,32,32,32,32,32,32,32,32,32
  };

  static double _noise_thresh_44[]={
    /*  .2,.2,.3,.4,.5,.5,9999.,9999.,9999.,9999., */
     .2,.2,.2,.4,.6,9999.,9999.,9999.,9999.,9999.,9999.,
  };

  static double _noise_thresh_5only[]={
   .5,.5,
  };

}